From 08a17fd3f853b2119540014d13669654edb71e41 Mon Sep 17 00:00:00 2001
From: zhangmeng <zhangmeng.kevin@linux.spacemit.com>
Date: Mon, 19 May 2025 20:37:11 +0800
Subject: [PATCH 26/43] driver: input: add spacemit p1 key driver support

community inclusion
category: feature
bugzilla: https://github.com/RVCK-Project/rvck-olk/issues/27
Reference: https://gitee.com/bianbu-linux/linux-6.6/commit/85f7aea27516e3b73527247ce42947b53ce001dd

--------------------------------

The function of spacemit p1 power-key support power-off,
short press, long press. And the event support key down
and key up.

Signed-off-by: zhangmeng <zhangmeng.kevin@linux.spacemit.com>
---
 drivers/input/misc/Kconfig              |  10 ++
 drivers/input/misc/Makefile             |   1 +
 drivers/input/misc/spacemit-p1-pwrkey.c | 211 ++++++++++++++++++++++++
 3 files changed, 222 insertions(+)
 create mode 100644 drivers/input/misc/spacemit-p1-pwrkey.c

diff --git a/drivers/input/misc/Kconfig b/drivers/input/misc/Kconfig
index 6ba984d7f0b18..64fb6e48d7482 100644
--- a/drivers/input/misc/Kconfig
+++ b/drivers/input/misc/Kconfig
@@ -939,4 +939,14 @@ config INPUT_STPMIC1_ONKEY
 	  To compile this driver as a module, choose M here: the
 	  module will be called stpmic1_onkey.
 
+config INPUT_SPACEMIT_P1_PWRKEY
+	tristate "Spacemit p1 power-key support"
+	depends on MFD_SPACEMIT_P1
+	help
+	  Support the power-key of Spacemit P1 PMICs as an input device
+	  reporting power button status.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called spacemit-p1-pwrkey.
+
 endif
diff --git a/drivers/input/misc/Makefile b/drivers/input/misc/Makefile
index 04296a4abe8e8..452602d24903c 100644
--- a/drivers/input/misc/Makefile
+++ b/drivers/input/misc/Makefile
@@ -90,3 +90,4 @@ obj-$(CONFIG_INPUT_WM831X_ON)		+= wm831x-on.o
 obj-$(CONFIG_INPUT_XEN_KBDDEV_FRONTEND)	+= xen-kbdfront.o
 obj-$(CONFIG_INPUT_YEALINK)		+= yealink.o
 obj-$(CONFIG_INPUT_IDEAPAD_SLIDEBAR)	+= ideapad_slidebar.o
+obj-$(CONFIG_INPUT_SPACEMIT_P1_PWRKEY)	+= spacemit-p1-pwrkey.o
\ No newline at end of file
diff --git a/drivers/input/misc/spacemit-p1-pwrkey.c b/drivers/input/misc/spacemit-p1-pwrkey.c
new file mode 100644
index 0000000000000..cfc44b7901aea
--- /dev/null
+++ b/drivers/input/misc/spacemit-p1-pwrkey.c
@@ -0,0 +1,211 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * power-key driver for Spacemit P1
+ *
+ * Copyright (c) 2023, SPACEMIT Co., Ltd
+ */
+
+#include <linux/of.h>
+#include <linux/errno.h>
+#include <linux/init.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/pm_wakeirq.h>
+#include <linux/notifier.h>
+#include <linux/spinlock.h>
+#include <linux/suspend.h>
+#include <linux/mfd/spacemit_p1.h>
+
+static int report_event, fall_triggered;
+static struct notifier_block   pm_notify;
+static spinlock_t pm_lock;
+
+static irqreturn_t pwrkey_fall_irq(int irq, void *_pwr)
+{
+	unsigned long flags;
+	struct input_dev *pwr = _pwr;
+
+	spin_lock_irqsave(&pm_lock, flags);
+	if (report_event) {
+		input_report_key(pwr, KEY_POWER, 1);
+		input_sync(pwr);
+		fall_triggered = 1;
+	}
+
+	pm_wakeup_event(pwr->dev.parent, 0);
+
+	spin_unlock_irqrestore(&pm_lock, flags);
+
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t pwrkey_rise_irq(int irq, void *_pwr)
+{
+	unsigned long flags;
+	struct input_dev *pwr = _pwr;
+
+	spin_lock_irqsave(&pm_lock, flags);
+	/* report key up if key down has been reported */
+	if (fall_triggered) {
+		input_report_key(pwr, KEY_POWER, 0);
+		input_sync(pwr);
+		fall_triggered = 0;
+	}
+
+	pm_wakeup_event(pwr->dev.parent, 0);
+
+	spin_unlock_irqrestore(&pm_lock, flags);
+
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t pwrkey_skey_irq(int irq, void *_pwr)
+{
+	/* do nothing by now */
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t pwrkey_lkey_irq(int irq, void *_pwr)
+{
+	/* do nothing by now */
+	return IRQ_HANDLED;
+}
+
+static int pwrk_pm_notify(struct notifier_block *notify_block,
+			unsigned long mode, void *unused)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&pm_lock, flags);
+
+	switch (mode) {
+	case PM_SUSPEND_PREPARE:
+		/* don't report power-key when enter suspend */
+		report_event = 0;
+		break;
+
+	case PM_POST_SUSPEND:
+		/* restore report power-key */
+		report_event = 1;
+		break;
+	}
+
+	spin_unlock_irqrestore(&pm_lock, flags);
+
+	return 0;
+}
+
+static int spm_p1_pwrkey_probe(struct platform_device *pdev)
+{
+	int err;
+	struct input_dev *pwr;
+	int rise_irq, fall_irq, s_key_irq, l_key_irq;
+
+	report_event = 1;
+	fall_triggered = 0;
+
+	pwr = devm_input_allocate_device(&pdev->dev);
+	if (!pwr) {
+		dev_err(&pdev->dev, "Can't allocate power button\n");
+		return -ENOMEM;
+	}
+
+	pwr->name = "spm_p1 pwrkey";
+	pwr->phys = "spm_p1_pwrkey/input0";
+	pwr->id.bustype = BUS_HOST;
+	input_set_capability(pwr, EV_KEY, KEY_POWER);
+
+	rise_irq = platform_get_irq(pdev, 0);
+	if (rise_irq < 0)
+		return rise_irq;
+
+	fall_irq = platform_get_irq(pdev, 1);
+	if (fall_irq < 0)
+		return fall_irq;
+
+	s_key_irq = platform_get_irq(pdev, 2);
+	if (s_key_irq < 0)
+		return s_key_irq;
+
+	l_key_irq = platform_get_irq(pdev, 3);
+	if (l_key_irq < 0)
+		return l_key_irq;
+
+	err = devm_request_any_context_irq(&pwr->dev, rise_irq,
+					   pwrkey_rise_irq,
+					   IRQF_TRIGGER_NONE | IRQF_ONESHOT,
+					   "spm_p1_pwrkey_rise", pwr);
+	if (err < 0) {
+		dev_err(&pdev->dev, "Can't register rise irq: %d\n", err);
+		return err;
+	}
+
+	err = devm_request_any_context_irq(&pwr->dev, fall_irq,
+					   pwrkey_fall_irq,
+					   IRQF_TRIGGER_NONE | IRQF_ONESHOT,
+					   "spm_p1_pwrkey_fall", pwr);
+	if (err < 0) {
+		dev_err(&pdev->dev, "Can't register fall irq: %d\n", err);
+		return err;
+	}
+
+	err = devm_request_any_context_irq(&pwr->dev, s_key_irq,
+					   pwrkey_skey_irq,
+					   IRQF_TRIGGER_NONE | IRQF_ONESHOT,
+					   "spm_p1_pwrkey_skey", pwr);
+	if (err < 0) {
+		dev_err(&pdev->dev, "Can't register skey irq: %d\n", err);
+		return err;
+	}
+
+	err = devm_request_any_context_irq(&pwr->dev, l_key_irq,
+					   pwrkey_lkey_irq,
+					   IRQF_TRIGGER_NONE | IRQF_ONESHOT,
+					   "spm_p1_pwrkey_lkey", pwr);
+	if (err < 0) {
+		dev_err(&pdev->dev, "Can't register lkey irq: %d\n", err);
+		return err;
+	}
+
+	err = input_register_device(pwr);
+	if (err) {
+		dev_err(&pdev->dev, "Can't register power button: %d\n", err);
+		return err;
+	}
+
+	platform_set_drvdata(pdev, pwr);
+	dev_pm_set_wake_irq(&pdev->dev, fall_irq);
+	device_init_wakeup(&pdev->dev, true);
+
+	spin_lock_init(&pm_lock);
+
+	pm_notify.notifier_call = pwrk_pm_notify;
+	err = register_pm_notifier(&pm_notify);
+	if (err) {
+		dev_err(&pdev->dev, "Register pm notifier failed\n");
+		return err;
+	}
+
+	return 0;
+}
+
+static const struct of_device_id spm_p1_pwrkey_id_table[] = {
+	{ .compatible = "spacemit,p1,pwrkey", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, spm_p1_pwrkey_id_table);
+
+static struct platform_driver spm_p1_pwrkey_driver = {
+	.probe = spm_p1_pwrkey_probe,
+	.driver = {
+		.name = "spm-p1-pwrkey",
+		.of_match_table = of_match_ptr(spm_p1_pwrkey_id_table),
+	},
+};
+module_platform_driver(spm_p1_pwrkey_driver);
+
+MODULE_DESCRIPTION("Spacemit P1 Power Key driver");
+MODULE_LICENSE("GPL");
-- 
2.51.0

